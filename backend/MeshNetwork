import React, { useState, useEffect } from 'react';
import {
  AppRegistry,
  ListView,
  StyleSheet,
  Text,
  View,
  TouchableHighlight,
  TextInput,
  Button,
  Alert
} from 'react-native';
import MultipeerConnectivity from 'react-native-multipeer';

function getStateFromSources() {
  const ds = new ListView.DataSource({ rowHasChanged: (r1, r2) => r1 !== r2 });
  return {
    dataSource: ds.cloneWithRows(MultipeerConnectivity.getAllPeers()),
    message: '',
    selectedPeer: null,
    peers: MultipeerConnectivity.getAllPeers(),
  };
}

const PeerApp = () => {
  const [state, setState] = useState(getStateFromSources());

  useEffect(() => {
    MultipeerConnectivity.on('peerFound', _onChange);
    MultipeerConnectivity.on('peerLost', _onChange);
    MultipeerConnectivity.on('invite', (event) => {
      // Automatically accept invitations
      MultipeerConnectivity.rsvp(event.invite.id, true);
    });
    MultipeerConnectivity.on('peerConnected', (event) => {
      Alert.alert(`${event.peer.id} connected!`);
      setState(getStateFromSources());
    });
    MultipeerConnectivity.on('payloadReceived', (event) => {
      const message = JSON.parse(event.payload);
      if (message.destination === MultipeerConnectivity.getMyPeerID()) {
        Alert.alert(`Message received from ${event.peer.id}: ${message.content}`);
      } else {
        _forwardMessage(message);
      }
    });
    MultipeerConnectivity.advertise('channel1', { name: `User-${Math.round(1e6 * Math.random())}` });
    MultipeerConnectivity.browse('channel1');

    return () => {
      MultipeerConnectivity.off('peerFound', _onChange);
      MultipeerConnectivity.off('peerLost', _onChange);
      MultipeerConnectivity.off('invite');
      MultipeerConnectivity.off('peerConnected');
      MultipeerConnectivity.off('payloadReceived');
    };
  }, []);

  const _onChange = () => {
    setState(getStateFromSources());
  };

  const _sendMessage = () => {
    if (state.selectedPeer) {
      const message = {
        destination: state.selectedPeer.id,
        content: state.message,
        path: [MultipeerConnectivity.getMyPeerID()],
      };
      MultipeerConnectivity.sendPayload(state.selectedPeer.id, JSON.stringify(message));
      setState({ ...state, message: '' });
    } else {
      Alert.alert('No peer selected');
    }
  };

  const _forwardMessage = (message) => {
    const nextPeer = state.peers.find(peer => !message.path.includes(peer.id));
    if (nextPeer) {
      message.path.push(MultipeerConnectivity.getMyPeerID());
      MultipeerConnectivity.sendPayload(nextPeer.id, JSON.stringify(message));
    }
  };

  const renderRow = (peer) => (
    <TouchableHighlight onPress={() => setState({ ...state, selectedPeer: peer })} style={styles.row}>
      <View>
        <Text>{peer.name}</Text>
      </View>
    </TouchableHighlight>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Select a peer and send a message</Text>
      <ListView
        style={styles.peers}
        dataSource={state.dataSource}
        renderRow={renderRow}
      />
      <TextInput
        style={styles.input}
        placeholder="Type your message here"
        value={state.message}
        onChangeText={(text) => setState({ ...state, message: text })}
      />
      <Button
        title="Send Message"
        onPress={_sendMessage}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  peers: {
    width: '100%',
    height: '60%',
  },
  row: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#cccccc',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    margin: 10,
    paddingHorizontal: 10,
    width: '80%',
  },
  text: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
});

AppRegistry.registerComponent('PeerApp', () => PeerApp);

export default PeerApp;
